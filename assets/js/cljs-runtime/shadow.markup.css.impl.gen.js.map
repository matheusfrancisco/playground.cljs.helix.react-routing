{"version":3,"sources":["shadow/markup/css/impl/gen.cljc"],"mappings":"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","names":["shadow$markup$css$impl$gen$IElement$el_selector$dyn","x__5393__auto__","m__5394__auto__","shadow.markup.css.impl.gen/el-selector","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","shadow$markup$css$impl$gen$IElement$el_type$dyn","shadow.markup.css.impl.gen/el-type","shadow$markup$css$impl$gen$IElement$el_root$dyn","shadow.markup.css.impl.gen/el-root","shadow.markup.css.impl.gen/IElement","x","env","shadow$markup$css$impl$gen$IStyleGen$gen_css_rules$dyn","shadow.markup.css.impl.gen/gen-css-rules","shadow.markup.css.impl.gen/IStyleGen","tag","class","shadow.markup.css.impl.gen/gen-el-selector","ns","el-name","or__5045__auto__","cljs.core/meta","cljs.core/name","clojure.string/replace","cljs.core/constantly","shadow.markup.css.impl.gen/css-rules","root","cljs.core/map?","shadow.markup.css.impl.gen/map->root","shadow.markup.css.impl.gen/css-rules-for-el","el","shadow.markup.css.impl.gen/number-as-str-props","shadow.markup.css.impl.gen/css-value-to-str","key","value","cljs.core/contains?","cljs.core/vector?","p1__22957#","cljs.core.map","clojure.string.join","shadow.markup.css.impl.gen/gen-rule-attrs","attrs","cljs.core/reduce-kv","s","js/Error","shadow.markup.css.impl.gen/gen-rule","selector","cljs.core/seq","cljs.core/every?","cljs.core/keyword?","cljs.core/keys","shadow.markup.css.impl.gen/merge-selector","clojure.string/includes?","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.markup.css.impl.gen/Rule","shadow.markup.css.impl.gen/->Rule","type","nested-rules","this","G__22969","cljs.core/Keyword","self","p1__22966#","cljs.core.mapcat","cljs.core.into","p1__22967#","nested","p1__22968#","cljs.core/not","shadow.markup.css.impl.gen/rule?","shadow.markup.css.impl.gen/group*","query","rules","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","shadow.markup.css.impl.gen/media","seq22974","G__22975","cljs.core/first","cljs.core/next","G__22976","self__5754__auto__","shadow.markup.css.impl.gen/rule","cljs.core.ex_info","shadow.markup.css.impl.gen/nested-rule","parent","cljs.core/native-satisfies?","and__5043__auto__","cljs.core._EQ_","cljs.core/count","G__22978","vec__22979","cljs.core.nth","suffix","shadow.markup.css.impl.gen/root*","shadow.markup.css.impl.gen/root","seq22989","G__22990","shadow.markup.css.impl.gen/attrs-from-map","m","k","v","cljs.core.assoc","shadow.markup.css.impl.gen/no-nested-rules!","shadow.markup.css.impl.gen/rules-from-map","cljs.core.filter","cljs.core/complement","cljs.core.get","sub-rules","clojure.string/starts-with?"],"sourcesContent":["(ns shadow.markup.css.impl.gen\n  (:require [clojure.string :as str]))\n\n(defprotocol IElement\n  (el-selector [x])\n  (el-type [x])\n  (el-root [x env]))\n\n(defprotocol IStyleGen\n  (gen-css-rules [x tag class] \"generate a sequence of strings (css-rules)\"))\n\n(declare map->root)\n\n(defn gen-el-selector\n  \"called from macro, assumes ns as clojure.lang.Namespace and el-name as a symbol\"\n  [ns el-name]\n  (let [ns\n        (or (-> ns meta :shadow.markup.css/alias)\n            (str ns))\n\n        el-name\n        (or (-> el-name meta :shadow.markup.css/alias)\n            (name el-name))]\n    (-> (str ns \"--\" el-name)\n        ;; FIXME: some more munging might be required?\n        ;; css selectors probably don't allow some chars that are otherwise ok in an ns/name ($!? come to mind)\n        (str/replace #\"\\.\" (constantly \"-\")))))\n\n(defn css-rules [root tag class]\n  (let [root\n        (if (map? root)\n          (map->root root)\n          root)]\n\n    (gen-css-rules root tag class)\n    ))\n\n(defn css-rules-for-el\n  [env el]\n  (let [root\n        (el-root el env)\n\n        tag\n        (el-type el)\n\n        class\n        (el-selector el)]\n\n    (css-rules root tag class)))\n\n(def number-as-str-props\n  #{:flex\n    :font-weight\n    :z-index\n    :opacity})\n\n(defn css-value-to-str [key value]\n  (cond\n    (string? value)\n    value\n\n    (number? value)\n    (cond\n      (zero? value)\n      \"0\"\n\n      (contains? number-as-str-props key)\n      (str value)\n\n      :else\n      (str value \"px\"))\n\n    (vector? value)\n    (->> value\n         (map #(css-value-to-str key %))\n         (str/join \" \"))\n    ))\n\n(defn gen-rule-attrs [attrs]\n  (reduce-kv\n    (fn [s key value]\n      (str s \"\\n  \" (name key) \": \" (css-value-to-str key value) \";\"))\n    \"\"\n    attrs))\n\n(defn gen-rule [selector attrs]\n  ;; safe-guard against invalid rules\n  {:pre [(seq attrs)\n         (string? selector)\n         (every? keyword? (keys attrs))]}\n\n  (str selector \" {\"\n       (gen-rule-attrs attrs)\n       \"\\n}\"))\n\n(defn merge-selector [selector tag class]\n  (cond\n    (str/includes? selector \"%\")\n    (-> selector\n        (str/replace #\"%\" tag)\n        (str/replace #\"&\" (str \".\" class)))\n\n    :else\n    (str/replace selector #\"&\" (str tag \".\" class))))\n\n(deftype Rule [type selector attrs nested-rules]\n  IStyleGen\n  (gen-css-rules [this tag class]\n    (case type\n      :root\n      (let [self\n            (if (seq attrs)\n              [(gen-rule (str tag \".\" class) attrs)]\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :rule\n      (let [self\n            (if (seq attrs)\n              (let [selector (merge-selector selector tag class)]\n                [(gen-rule selector attrs)])\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :group\n      (let [nested\n            (mapcat #(gen-css-rules % tag class) nested-rules)]\n\n        (if (and (not (seq attrs))\n                 (not (seq nested)))\n          ;; group has not attrs or nested rules, don't generate a rule\n          []\n          ;; generate one rule that combines all other rules\n          [(str selector \" {\\n\"\n                (when (seq attrs)\n                  (gen-rule (str tag \".\" class) attrs))\n                (when (seq nested)\n                  (str \"\\n\" (str/join \"\\n\" nested)))\n                \"\\n}\")])))))\n\n(defn rule? [x]\n  (instance? Rule x))\n\n(defn group* [query attrs rules]\n  {:pre [(string? query)\n         (map? attrs)\n         (every? rule? rules)]}\n  (Rule. :group query attrs rules))\n\n(defn media [query attrs & rules]\n  (group* (str \"@media\" query) attrs rules))\n\n(defn rule [selector attrs]\n  {:pre [(string? selector)\n         (map? attrs)]}\n  (when-not (str/includes? selector \"&\")\n    (throw (ex-info \"rules must contain & to place prefix (&:hover instead of :hover)\" {:selector selector :attrs attrs})))\n\n  (Rule. :rule selector attrs []))\n\n(defn nested-rule [parent attrs]\n  (let [selector\n        (cond\n          (satisfies? IElement parent)\n          (str \".\" (el-selector parent) \" &\")\n\n          (and (vector? parent)\n               (= 1 (count parent))\n               (and (satisfies? IElement (first parent))))\n          (str \".\" (el-selector (first parent)) \" &\")\n\n          (and (vector? parent)\n               (= 2 (count parent)))\n\n          (let [[el suffix] parent]\n            (when-not (satisfies? IElement el)\n              (throw (ex-info \"need to be nested in IElement\" {:parent parent :attrs attrs})))\n            (str \".\" (el-selector el) suffix \" &\")))]\n    (Rule. :rule selector attrs [])))\n\n(defn root* [attrs rules]\n  {:pre [(map? attrs)\n         (every? rule? rules)]}\n  (Rule. :root nil attrs rules))\n\n(defn root [attrs & rules]\n  (root* attrs rules))\n\n(defn attrs-from-map [m]\n  (reduce-kv\n    (fn [m k v]\n      (if-not (keyword? k)\n        m\n        (assoc m k v)))\n    {}\n    m))\n\n(defn- no-nested-rules!\n  [selector rules]\n  (when (seq rules)\n    (throw (ex-info \"selector cannot have nested rules\" {:selector selector :rules (map :selector rules)}))))\n\n(defn rules-from-map [m]\n  (->> m\n       (keys)\n       (filter (complement keyword?))\n       (map\n         (fn [selector]\n           (let [v (get m selector)\n\n                 sub-rules\n                 (rules-from-map v)\n\n                 attrs\n                 (attrs-from-map v)]\n             (cond\n               (and (string? selector)\n                    (str/starts-with? selector \"@\"))\n               (group* selector attrs sub-rules)\n\n               ;; FIXME: we could allow nesting but styles get messy at that point\n               (string? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (rule selector attrs))\n\n               (satisfies? IElement selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               (vector? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               :else\n               (throw (ex-info \"invalid key in map\" {:key selector :value v}))\n               ))))\n       (into [])))\n\n(defn map->root [m]\n  (root* (attrs-from-map m) (rules-from-map m)))\n\n"]}