{"version":3,"sources":["shadow/markup/react/impl/css.cljs"],"mappings":"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;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA,OAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sCAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CA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","names":["js/shadow","js/shadow.markup","js/shadow.markup.react","js/shadow.markup.react.impl","js/shadow.markup.react.impl.css","js/shadow.markup.react.impl.css.env-ref","shadow.markup.react.impl.css/env-ref","cljs.core/volatile!","js/shadow.markup.react.impl.css.active-elements-ref","shadow.markup.react.impl.css/active-elements-ref","cljs.core/sorted-map","js/shadow.markup.react.impl.css.style-cache-ref","shadow.markup.react.impl.css/style-cache-ref","shadow.markup.react.impl.css/get-rules-for-el","env","el","name","shadow.markup.css.impl.gen/el-selector","or__5045__auto__","cljs.core/deref","cljs.core.get","css","shadow.markup.css.impl.gen/css-rules-for-el","cljs.core.assoc","shadow.markup.react.impl.css/style-container","styles-container-id","shadow.dom.by_id","node","G__27487","shadow.dom/build","shadow.dom.append","js/document.head","shadow.markup.react.impl.css/insert-styles!","container","n","rules","n__5636__auto__","i","cljs.core/count","cljs.core.nth","shadow.markup.react.impl.css/regenerate-styles!","styles","cljs.core/vals","p1__27490#","cljs.core.mapcat","clojure.string.join","shadow.markup.react.impl.css/set-env!","new-env","cljs.core/vreset!","cljs.core/empty?","shadow.markup.react.impl.css/inject-rules!","selector","cljs.core.dissoc","shadow.markup.env/DEBUG","e27492","e","js/console.error","p__27494","map__27496","cljs.core/--destructure-map","shadow.markup.react.impl.css/check-conflicting-props!","class","className","classes","props","total","G__27500","cljs.core.ex_info","shadow.markup.react.impl.css/merge-props-and-class","class-from-props","temp__5804__auto__","cljs.core/map?","cljs.core/keys","cljs.core.filter","key","cljs.core.map","cljs.core/name","cljs.core.remove","cljs.core/nil?","shadow.markup.react.impl.interop/convert-props","shadow.markup.react.impl.css/styled-element-invoke","args","cljs.core/not","css-sel","el-type","shadow.markup.css.impl.gen/el-type","js/module$node_modules$react$index.createElement","cljs.core/PROTOCOL_SENTINEL","unused__11783__auto__","self__","G__27502","js/Error","args27501","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","shadow.markup.react.impl.css/StyledElement","shadow.markup.react.impl.css/->StyledElement","style-fn","injected?","_","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","c11","c12","c13","c14","c15","c16"],"sourcesContent":["(ns shadow.markup.react.impl.css\n  (:require [clojure.string :as str]\n            [shadow.markup.react.impl.interop :as interop]\n            [shadow.markup.css.impl.gen :as gen]\n            [shadow.markup.env :as env]\n            [shadow.dom :as dom]\n            [\"react\" :as react]))\n\n(defonce env-ref (volatile! {}))\n\n(defonce active-elements-ref\n  ;; FIXME: is sorting useful?\n  ;; {classname-of-el el-instance}\n  ;; keyed by classname since live-reloading will create a new el-instance\n  ;; which can't remove the old instance since it is not equal\n  (volatile! (sorted-map)))\n\n(defonce style-cache-ref\n  (volatile! {}))\n\n(defn get-rules-for-el [env el]\n  (let [name (gen/el-selector el)]\n    (or (get @style-cache-ref name)\n        (let [css\n              (gen/css-rules-for-el env el)]\n          (vswap! style-cache-ref assoc name css)\n          css\n          ))))\n\n(defn style-container []\n  (let [styles-container-id \"shadow-markup-styles\"]\n    (or (dom/by-id styles-container-id)\n        (let [node (dom/build [:style {:id styles-container-id :type \"text/css\"}])]\n          (dom/append js/document.head node)\n          node))))\n\n(defn insert-styles!\n  \"inserts rules for a single el using sheet.insertRule\"\n  [el]\n  (let [container\n        (style-container)\n\n        n\n        (.. container -sheet -rules -length)\n\n        rules\n        (get-rules-for-el @env-ref el)]\n\n    (dotimes [i (count rules)]\n      (.. container -sheet (insertRule (nth rules i) (+ n i))))\n    ))\n\n(defn regenerate-styles!\n  \"generates a css string and replace the textContent of the <style> container\"\n  []\n  (let [env\n        @env-ref\n\n        styles\n        (->> @active-elements-ref\n             (vals)\n             (mapcat #(get-rules-for-el env %))\n             (str/join \"\\n\"))\n\n        container\n        (style-container)]\n\n    (set! (.-textContent container) styles)))\n\n(defn set-env! [new-env]\n  (vreset! env-ref new-env)\n  (vreset! style-cache-ref {})\n\n  (when-not (empty? @active-elements-ref)\n    (regenerate-styles!)))\n\n(defn inject-rules! [el]\n  (let [selector (gen/el-selector el)]\n    (vswap! style-cache-ref dissoc selector)\n    (vswap! active-elements-ref assoc selector el)\n\n    ;; when using many elements for the first time\n    ;; each element will cause a re-parse of all previously generated css rules\n    ;; since we replace the textContent of the <style> element\n    ;; the better option would be to use style.sheet.insertRule\n    ;; but that has the effect of not being able to modify styles in devtools\n    ;; which is annoying, so we only do it when env/DEBUG is false\n\n    (if ^boolean env/DEBUG\n      (regenerate-styles!)\n      (try\n        (insert-styles! el)\n        (catch :default e\n          (js/console.error \"insert-styles failed\" e el)\n          ;; fallback in case insertRule fails\n          (regenerate-styles!))))))\n\n(defn check-conflicting-props! [{:keys [class className classes] :as props}]\n  (let [total\n        (cond-> 0\n          class\n          (inc)\n          className\n          (inc)\n          classes\n          (inc))]\n\n    (when (> total 1)\n      (throw (ex-info \"conflicting props, can only have one of: class className classes\" props)))\n    ))\n\n(defn merge-props-and-class [props class]\n  (when ^boolean env/DEBUG\n    (check-conflicting-props! props))\n\n  (let [class-from-props\n        (or (:class props)\n            (:className props)\n            (when-let [classes (:classes props)]\n              (if (map? classes)\n                ;; {:selected boolean-ish}\n                (->> classes\n                     (keys)\n                     (filter\n                       (fn [key]\n                         (get classes key)))\n                     (map name)\n                     (str/join \" \"))\n\n                ;; [(when x \"selected\") ...]\n                (->> classes\n                     (remove nil?)\n                     (str/join \" \")))))\n\n        className\n        (if (nil? class-from-props)\n          class\n          (str class \" \" class-from-props))]\n\n    (-> props\n        (dissoc :class :classes)\n        (assoc :className className)\n        (interop/convert-props))))\n\n(defn styled-element-invoke [^clj el props ^js args]\n  (when (not (.-injected? el))\n    (inject-rules! el)\n    (set! (.-injected? el) true))\n\n  (let [css-sel (gen/el-selector el)\n        el-type (gen/el-type el)]\n\n    (if (map? props)\n      (.unshift args (merge-props-and-class props css-sel))\n      (do (.unshift args props)\n          (.unshift args #js {:className css-sel})))\n\n    (.unshift args el-type)\n    (.apply react/createElement nil args)))\n\n(deftype StyledElement\n  [el-type css-sel style-fn ^:mutable injected?]\n  gen/IElement\n  (el-type [_]\n    el-type)\n  (el-selector [_]\n    css-sel)\n  (el-root [_ env]\n    (style-fn env))\n\n  IFn\n  (-invoke [el props]\n    (styled-element-invoke el props #js []))\n  (-invoke [el props c1]\n    (styled-element-invoke el props #js [c1]))\n  (-invoke [el props c1 c2]\n    (styled-element-invoke el props #js [c1 c2]))\n  (-invoke [el props c1 c2 c3]\n    (styled-element-invoke el props #js [c1 c2 c3]))\n  (-invoke [el props c1 c2 c3 c4]\n    (styled-element-invoke el props #js [c1 c2 c3 c4]))\n  (-invoke [el props c1 c2 c3 c4 c5]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15]))\n  (-invoke [el props c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16]\n    (styled-element-invoke el props #js [c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16]))\n  ;; FIXME: add more\n  )\n"]}